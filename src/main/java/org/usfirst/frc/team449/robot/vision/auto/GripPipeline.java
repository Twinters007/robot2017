package org.usfirst.frc.team449.robot.vision.auto;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.HashMap;

import org.opencv.core.*;
import org.opencv.core.Core.*;
import org.opencv.features2d.FeatureDetector;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.*;
import org.opencv.objdetect.*;

/**
 * GripPipeline class.
 *
 * <p>An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class GripPipeline {

    //Outputs
    private Mat cvCvtcolorOutput = new Mat();
    private Mat hsvThresholdOutput = new Mat();
    private Mat blurOutput = new Mat();
    private ArrayList<Line> findLinesOutput = new ArrayList<Line>();
    private ArrayList<Line> filterLinesOutput = new ArrayList<Line>();

    static {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }

    /**
     * This is the primary method that runs the entire pipeline and updates the outputs.
     */
    public void process(Mat source0) {
        // Step CV_cvtColor0:
        Mat cvCvtcolorSrc = source0;
        int cvCvtcolorCode = Imgproc.COLOR_BGR2HSV;
        cvCvtcolor(cvCvtcolorSrc, cvCvtcolorCode, cvCvtcolorOutput);

        // Step HSV_Threshold0:
        Mat hsvThresholdInput = cvCvtcolorOutput;
        double[] hsvThresholdHue = {168.0, 172.0};
        double[] hsvThresholdSaturation = {253.0, 255.0};
        double[] hsvThresholdValue = {253.0, 255.0};
        hsvThreshold(hsvThresholdInput, hsvThresholdHue, hsvThresholdSaturation, hsvThresholdValue, hsvThresholdOutput);

        // Step Blur0:
        Mat blurInput = hsvThresholdOutput;
        BlurType blurType = BlurType.get("Box Blur");
        double blurRadius = 5.405405405405415;
        blur(blurInput, blurType, blurRadius, blurOutput);

        // Step Find_Lines0:
        Mat findLinesInput = blurOutput;
        findLines(findLinesInput, findLinesOutput);

    }

    /**
     * This method is a generated getter for the output of a CV_cvtColor.
     * @return Mat output from CV_cvtColor.
     */
    public Mat cvCvtcolorOutput() {
        return cvCvtcolorOutput;
    }

    /**
     * This method is a generated getter for the output of a HSV_Threshold.
     * @return Mat output from HSV_Threshold.
     */
    public Mat hsvThresholdOutput() {
        return hsvThresholdOutput;
    }

    /**
     * This method is a generated getter for the output of a Blur.
     * @return Mat output from Blur.
     */
    public Mat blurOutput() {
        return blurOutput;
    }

    /**
     * This method is a generated getter for the output of a Find_Lines.
     * @return ArrayList<Line> output from Find_Lines.
     */
    public ArrayList<Line> findLinesOutput() {
        return findLinesOutput;
    }

    /**
     * This method is a generated getter for the output of a Filter_Lines.
     * @return ArrayList<Line> output from Filter_Lines.
     */
    public ArrayList<Line> filterLinesOutput() {
        return filterLinesOutput;
    }


    /**
     * Converts an image from one color space to another.
     * @param src Image to convert.
     * @param code conversion code.
     * @param dst converted Image.
     */
    private void cvCvtcolor(Mat src, int code, Mat dst) {
        Imgproc.cvtColor(src, dst, code);
    }

    /**
     * Segment an image based on hue, saturation, and value ranges.
     *
     * @param input The image on which to perform the HSL threshold.
     * @param hue The min and max hue
     * @param sat The min and max saturation
     * @param val The min and max value
     * @param out The image in which to store the output.
     */
    private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val,
                              Mat out) {
        Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
        Core.inRange(out, new Scalar(hue[0], sat[0], val[0]),
                new Scalar(hue[1], sat[1], val[1]), out);
    }

    /**
     * An indication of which type of filter to use for a blur.
     * Choices are BOX, GAUSSIAN, MEDIAN, and BILATERAL
     */
    enum BlurType{
        BOX("Box Blur"), GAUSSIAN("Gaussian Blur"), MEDIAN("Median Filter"),
        BILATERAL("Bilateral Filter");

        private final String label;

        BlurType(String label) {
            this.label = label;
        }

        public static BlurType get(String type) {
            if (BILATERAL.label.equals(type)) {
                return BILATERAL;
            }
            else if (GAUSSIAN.label.equals(type)) {
                return GAUSSIAN;
            }
            else if (MEDIAN.label.equals(type)) {
                return MEDIAN;
            }
            else {
                return BOX;
            }
        }

        @Override
        public String toString() {
            return this.label;
        }
    }

    /**
     * Softens an image using one of several filters.
     * @param input The image on which to perform the blur.
     * @param type The blurType to perform.
     * @param doubleRadius The radius for the blur.
     * @param output The image in which to store the output.
     */
    private void blur(Mat input, BlurType type, double doubleRadius,
                      Mat output) {
        int radius = (int)(doubleRadius + 0.5);
        int kernelSize;
        switch(type){
            case BOX:
                kernelSize = 2 * radius + 1;
                Imgproc.blur(input, output, new Size(kernelSize, kernelSize));
                break;
            case GAUSSIAN:
                kernelSize = 6 * radius + 1;
                Imgproc.GaussianBlur(input,output, new Size(kernelSize, kernelSize), radius);
                break;
            case MEDIAN:
                kernelSize = 2 * radius + 1;
                Imgproc.medianBlur(input, output, kernelSize);
                break;
            case BILATERAL:
                Imgproc.bilateralFilter(input, output, -1, radius, radius);
                break;
        }
    }

    public static class Line {
        public final double x1, y1, x2, y2;
        public Line(double x1, double y1, double x2, double y2) {
            this.x1 = x1;
            this.y1 = y1;
            this.x2 = x2;
            this.y2 = y2;
        }
        public double lengthSquared() {
            return Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2);
        }
        public double length() {
            return Math.sqrt(lengthSquared());
        }
        public double angle() {
            return Math.toDegrees(Math.atan2(y2 - y1, x2 - x1));
        }
    }
    /**
     * Finds all line segments in an image.
     * @param input The image on which to perform the find lines.
     * @param lineList The output where the lines are stored.
     */
    private void findLines(Mat input, ArrayList<Line> lineList) {
        final LineSegmentDetector lsd = Imgproc.createLineSegmentDetector();
        final Mat lines = new Mat();
        lineList.clear();
        if (input.channels() == 1) {
            lsd.detect(input, lines);
        } else {
            final Mat tmp = new Mat();
            Imgproc.cvtColor(input, tmp, Imgproc.COLOR_BGR2GRAY);
            lsd.detect(tmp, lines);
        }
        if (!lines.empty()) {
            for (int i = 0; i < lines.rows(); i++) {
                lineList.add(new Line(lines.get(i, 0)[0], lines.get(i, 0)[1],
                        lines.get(i, 0)[2], lines.get(i, 0)[3]));
            }
        }
    }




}

